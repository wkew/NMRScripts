/*** ^^A -*-C++-*- ***********************************************/
/*      pucf3                     06.09.2012                     */
/*****************************************************************/
/*      Short Description :                                      */
/*      Single scan pulse calibration via stroboscopic           */
/*      nutation experiment on channel 3                         */
/*      P.S.C. Wu & G. Otting,                                   */
/*         J. Magn. Reson. 176, 115-119 (2005)                   */
/*****************************************************************/
/*      Keywords :                                               */
/*      Pulse Calibration                                        */
/*****************************************************************/
/*      Description/Usage :                                      */
/*      This program does an automatic pulse calibration. The    */
/*      default nucleus is 1H, since this pulse varies most      */
/*      between samples. Other nuclei (13C, 19F,31P) are         */
/*      optional. It relies on a single on-resonance signal      */
/*      and was originally developed for samples in H2O+D2O. It  */
/*      does however also work for samples in organic solvents   */
/*      and even heteronuclei, provided the S/N is sufficient.   */
/*      For very dilute samples or samples in small diameter     */
/*      tubes this may not always be the case. For 13C the       */
/*      signal used is most likely the one of the organic        */
/*      solvent, as those from the actual compound will not be   */
/*      strong enough.                                           */
/*      The program creates an expno 99999 an runs the           */
/*      experiment there. The determined pulse is stored in      */
/*      the current expno and (for 1H) GETPROSOL executed.       */
/*      Options:                                                 */
/*         fast - uses o1 of current expno and rg = 1            */
/*         man  - prints pulses for -2 to +2dB around prosol pl1 */
/*         quiet - does not print any message                    */
/*         sn   - in case of poor S/N, uses EM rather than GM    */
/*         opt  - limit evaluated window according to reference  */
/*                   90o pulse. This requires the reference 90o  */
/*                   pulse to equal or shorter than the actual   */
/*                   pulse                                       */
/*         ds  - use four dummy scans in preparation experiment  */
/*         d1  - use d1 from dataset where pulsecal is started   */
/*                  alternatively d1 can be set by d1=value,     */
/*                  whereby blanks are not allowed               */
/*         same - use powerlevel from dataset where pulsecal is  */
/*                   started                                     */
/*         fns  - forground ns (in case of typo sn <-> ns), use  */
/*                   ns from dataset where pulsecal is started   */
/*                   in order to get the maximum S/N it may be   */
/*                   necessary to increase D1 (option d1)        */
/*                   alternatively ns can be set by ns=value,    */
/*                   whereby blanks are not allowed              */
/*                                                               */
/*         c13 - calibrate C13 (rather than H1) pulse            */
/*                  pulse is copied, but no getprosol done       */
/*         f19 - calibrate F1( (rather than H1) pulse            */
/*                  pulse is copied, but no getprosol done       */
/*         p31 - calibrate P31 (rather than H1) pulse            */
/*                  pulse is copied, but no getprosol done       */
/*****************************************************************/
/*      Author(s) :                                              */
/*      Name            : Wolfgang Bermel                        */
/*      Organisation    : Bruker BioSpin GmbH                    */
/*      Email           : wolfgang.bermel@bruker.de              */
/*****************************************************************/
/*      Name            Date    Modification:                    */
/*      ber             050324  created                          */
/*      ber             050329  including acquisition            */
/*      ber             050330  1D (o1) using digital            */
/*                                 using RGA and symmetrise      */
/*                                 flag man                      */
/*      ber             050402  bcmod (qpol)                     */
/*      ber             050705  reading bytordp                  */
/*      ber             050705  proc parameter changed           */
/*      ber             051209  show_meta added                  */
/*      ber             060111  linkpp/unlinkpp added            */
/*      ber             060127  divide rg by 2                   */
/*                                 option quiet added            */
/*      ber             060221  PULPROG corrected                */
/*                                 option fast added             */
/*      ber             060313  adding 3dB for setup 1D          */
/*      ber             060515  using 4 peaks                    */
/*      ber             060519  scalef added                     */
/*      ber             060530  linkpp/unlinkpp removed for      */
/*                                 Topspin 2.0                   */
/*      ber             060606  option sn added                  */
/*      ber             060705  ERRORABORT and audit added       */
/*      wem             060817  multiple command line options	 */
/*      ber             060920  handling for option sn changed   */
/*      ber             061013  workaround swh protonnr pl2      */
/*      ber             061206  option opt added                 */
/*      ber             070129  setting 10% either side to zero  */
/*      ber             070223  MI changed from 30 to 25         */
/*      ber             070226  pl_offset added                  */
/*      ber             070319  option rout added                */
/*      ber             070425  zgsafety handling added          */
/*      ber             070815  option rout now default,         */
/*                                 option c13 added              */
/*      ber             070830  deviation check for X only       */
/*	wem		070927	convertpeaklist txt		 */
/*	wem		071127	PATH handling changed            */
/*      ber             071205  F1P/F2P to +/- 10000             */
/*				modified for 19F and 31P         */
/*                              routing handling modified        */
/*                              temp. using pulsecal.t2.be       */
/*      ber             071212  d1 flag added                    */
/*      ber             080229  allowing for all freq to be      */
/*                                 used in B1 calculation        */
/*      ber             090206  option same and ns added         */
/*      ber             090504  sendgui added for getprosol      */
/*      ber             090525  using readPeakList()             */
/*      ber             090722  changed to new powerhandling     */
/*                                 for TopSpin 3.0               */
/*      ber             090825  nstxt corrected                  */
/*                                 modified for new prosol       */
/*                                 zg_safety handling changed    */
/*      ber             100720  pl range inman option corrected  */
/*      bm              120906  modified for channel 3           */
/*****************************************************************/
/*
$Id: pulsecal,v 1.22.2.2.2 2012/09/06 16:42:11 wem Exp $
*/


AUERR = pulsecal(curdat, cmd);
QUIT

#define MAXNUMFREQ 1000
#define MAXSIZE 16384

#include <lib/libacq.h>


int pulsecal(const char* curdat, const char* cmd)

{

static const char d1txt[] = "d1=";
static const char nstxt[] = "ns=";
static const char getprosoltxt[] = "getprosol";

char infile[PATH_MAX];
char text [PATH_MAX], text2[PATH_MAX];
char text4[PATH_MAX], text5[PATH_MAX];
char solvent[100], obsnuc[20], nuc1[20], nuc2[20], nuc3[20];
char autext[256];

char *hashbuf;
char *cp;
const char* jret;

double freq[MAXNUMFREQ], amp[MAXNUMFREQ];
double o1, freq_max, freq1, amp1, sw, width;
double gb1_pl29, bf1, gb1_pl29_max;
double freq_min1, freq_max1, freq_min2, freq_max2;
double amp_max1, amp_max2, amp_max3, amp_max4;
double p90_var, p90_pl29, p90_scalef, thresh;
double pl_offset, pl_offset_h, pl_offset_c, pl_offset_f, pl_offset_p;
double freq_delta, freq_sum_pos, freq_sum_neg;
double ratio, delta_pl, pl_var, pl_start;
double max_watt, max_db;

float p90_pl1, pl1=0, pl29;
float p1=0, d1, d1_ref, p90_ref, pl90_ref, de;
float cnst31, dw, rg;

int byteorder;
int numfreq_max, counter;
int curexpno, newexpno;
int td, si, td2, ns;
int r_in[MAXSIZE], re1, re2;
int val, val_max, val_min;
int flag_pl, scalef;
int fastflag = 0, manflag = 0, quietflag = 0, snflag = 0, optflag = 0;
int dsflag = 0, h1flag = 1, c13flag = 0, p31flag = 0, f19flag = 0;
int allflag = 0, d1flag = 0, sameplflag = 0, powcheckflag = 0;
int nsflag = 0;
int d1arg = 0, nsarg = 0;
int arglim = 3;
int chan = 1, fcuchan, rsel, swibox, prechan, recchan, recsel, recpre;
int chan2, fcuchan2, rsel2, swibox2, prechan2, recchan2, recsel2, recpre2;
int powmod, hpmod;
int i, numpeaks;

FILE *fpi, *fpo;


/**** adjust pl_offset for each spectrometer,
      depending on cortab as well as difference between
      calibration of 360o pulse and pulsecal :
      *****/

pl_offset_h = 0.2;
pl_offset_c = 0.0;
pl_offset_f = 0.0;
pl_offset_p = 0.0;

/***** define more parameters *****/

td = 4096;
si = MAXSIZE;

dw = 100.0;

delta_pl = 12.0;

width = 80;

scalef = 4;

freq_max = 0.0;

p90_scalef = 0.8;


(void)strcpy(obsnuc, "1H");


/***** determine if powcheck is on *****/

switch(LibAcqLPowchkActive())
   {
   /*Fehler: LibAcqGetErrMsg() liefert Fehlertext*/
   case -1:
      Proc_err(ERROR_OPT,"%s", LibAcqGetErrMsg());
      powcheckflag = 1;
      break;

   /*POWCHK nicht aktiv*/
   case 0:
      powcheckflag = 1;
      break;

   /*POWCHK aktiv*/
   case 1:
      break;

   /*Fehler*/
   default:
      Proc_err(ERROR_OPT,"unknow return value while checking PowerCheck");
      powcheckflag = 1;
      break;
   }


/***** handle options *****/

while (i_argc >= arglim)
   {
   if (strcmp(i_argv[arglim - 1], "fast") == 0)
      fastflag = 1;

   if (strcmp(i_argv[arglim - 1], "man") == 0)
      manflag = 1;

   if (strcmp(i_argv[arglim - 1], "quiet") == 0)
      quietflag = 1;

   if (strcmp(i_argv[arglim - 1], "sn") == 0)
      snflag = 1;

   if (strcmp(i_argv[arglim - 1], "opt") == 0)
      optflag = 1;

   if (strcmp(i_argv[arglim - 1], "ds") == 0)
      dsflag = 1;

   if (strcmp(i_argv[arglim - 1], "all") == 0)
      allflag = 1;

   if (strcmp(i_argv[arglim - 1], "c13") == 0 || strcmp(i_argv[arglim - 1], "13c") == 0
        || strcmp(i_argv[arglim - 1], "C13") == 0 || strcmp(i_argv[arglim - 1], "13C") == 0)
      {
      c13flag = 1;
      h1flag = 0;
      }

   if (strcmp(i_argv[arglim - 1], "f19") == 0 || strcmp(i_argv[arglim - 1], "19f") == 0
        || strcmp(i_argv[arglim - 1], "F19") == 0 || strcmp(i_argv[arglim - 1], "19F") == 0)
      {
      f19flag = 1;
      h1flag = 0;
      }

   if (strcmp(i_argv[arglim - 1], "p31") == 0 || strcmp(i_argv[arglim - 1], "31p") == 0
        || strcmp(i_argv[arglim - 1], "P31") == 0 || strcmp(i_argv[arglim - 1], "31P") == 0)
      {
      p31flag = 1;
      h1flag = 0;
      }

   if (strcmp(i_argv[arglim - 1], "d1") == 0)
      d1flag = 1;

   if (strncmp(i_argv[arglim - 1], d1txt, sizeof(d1txt) - 1) == 0)
      d1arg = arglim - 1;

   if (strcmp(i_argv[arglim - 1], "same") == 0)
      sameplflag = 1;

   if (strcmp(i_argv[arglim - 1], "fns") == 0)
      nsflag = 1;

   if (strncmp(i_argv[arglim - 1], nstxt, sizeof(nstxt) - 1) == 0)
      nsarg = arglim - 1;

   arglim++;
   }


/***** check consistency *****/

if (manflag  &&  quietflag)
   {
   Proc_err(DEF_ERR_OPT, "ignoring option 'quiet' when option 'man' is specified");
   quietflag = 0;
   }


if ( (c13flag && f19flag) || (c13flag && p31flag) )
   {
   Proc_err(DEF_ERR_OPT, "not possible to do two nuclei at a time\n\n"
                         "   calibrating pulse for C13");
   f19flag = 0;
   p31flag = 0;
   }

if ( f19flag && p31flag )
   {
   Proc_err(DEF_ERR_OPT, "not possible to do two nuclei at a time\n\n"
                         "   calibrating pulse for F19");
   p31flag = 0;
   }


if ( sameplflag  &&  powcheckflag )
   {
   Proc_err(DEF_ERR_OPT, "ignoring option 'same', since PowerCheck is turned off (or undetermined)");
   sameplflag = 0;
   }


/***** define nucleus *****/

if ( c13flag == 1)
   (void)strcpy(obsnuc, "13C");

if ( f19flag == 1)
   (void)strcpy(obsnuc, "19F");

if ( p31flag == 1)
   (void)strcpy(obsnuc, "31P");


/***** check more consistency *****/

if ( (c13flag && fastflag) || (f19flag && fastflag) || (p31flag && fastflag) )
   {
   Proc_err(DEF_ERR_OPT, "ignoring option 'fast' when option '%s' is specified", obsnuc);
   fastflag = 0;
   }


if ( (c13flag && snflag) || (f19flag && snflag) || (p31flag && snflag) )
   {
   Proc_err(DEF_ERR_OPT, "ignoring option 'sn' when option '%s' is specified", obsnuc);
   snflag = 0;
   }

if ( (c13flag && dsflag) || (f19flag && dsflag) || (p31flag && dsflag) )
   {
   Proc_err(DEF_ERR_OPT, "ignoring option 'ds' when option '%s' is specified", obsnuc);
   dsflag = 0;
   }


/**** set pl_offset *****/

if ( c13flag == 1)
   pl_offset = pl_offset_c;

else if ( f19flag == 1)
   pl_offset = pl_offset_f;

else if ( p31flag == 1)
   pl_offset = pl_offset_p;

else
   pl_offset = pl_offset_h;


if ( pl_offset == 0 )
   (void)strcpy(text4,"");

else
   (void)sprintf(text4," (corrected by %.2f dB) ", pl_offset);


/***** get info *****/

GETCURDATA


curexpno = expno;

newexpno = 99999;


FETCHPAR("O1", &o1);

FETCHPAR("SOLVENT",solvent);

FETCHPAR("D 1", &d1_ref);

FETCHPAR("NS",&ns);


/***** get routing and reference pulses *****/

FETCHPAR("NUC1", nuc1);
FETCHPAR("NUC2", nuc2);
FETCHPAR("NUC3", nuc3);


if ( strcmp (nuc1, obsnuc) == 0 )
   {
   chan = 1;

   FETCHPAR("P 1", &p90_ref);
   FETCHPAR("PLdB 1", &pl90_ref);
   }

else if ( strcmp (nuc2, obsnuc) == 0 )
   {
   chan = 2;

   FETCHPAR("P 3", &p90_ref);
   FETCHPAR("PLdB 2", &pl90_ref);
   }

if ( strcmp (nuc3, obsnuc) == 0 )
   {
   chan = 3;

   FETCHPAR("P 1", &p90_ref);
   FETCHPAR("PLdB 3", &pl90_ref);
   }

else
   {
   (void)sprintf(text,"nucleus %s not defined", obsnuc);
   STOPMSG(text);
   }


(void)sprintf(text5, "FCUCHAN %d", chan);
FETCHPAR(text5, &fcuchan);

(void)sprintf(text5, "RSEL %d", fcuchan);
FETCHPAR(text5, &rsel);

(void)sprintf(text5, "SWIBOX %d", rsel);
FETCHPAR(text5, &swibox);

(void)sprintf(text5, "PRECHAN %d", swibox);
FETCHPAR(text5, &prechan);

(void)sprintf(text5, "RECCHAN %d", chan);
FETCHPAR(text5, &recchan);

(void)sprintf(text5, "RECSEL %d", recchan);
FETCHPAR(text5, &recsel);

(void)sprintf(text5, "RECPRE %d", recsel);
FETCHPAR(text5, &recpre);

FETCHPAR("POWMOD", &powmod);
FETCHPAR("HPMOD", &hpmod);


/***** create dataset *****/

DATASET (name,newexpno,procno,disk,user)


if ( c13flag == 1 )
   {
   RPAR("C13CPD", "all")

   /***** turn H1 off *****/
   chan2 = 2;

   (void)sprintf(text5, "FCUCHAN %d", chan2);
   FETCHPAR(text5, &fcuchan2);

   (void)sprintf(text5, "RSEL %d", fcuchan2);
   FETCHPAR(text5, &rsel2);

   (void)sprintf(text5, "SWIBOX %d", rsel2);
   FETCHPAR(text5, &swibox2);

   (void)sprintf(text5, "PRECHAN %d", swibox2);
   FETCHPAR(text5, &prechan2);

   (void)sprintf(text5, "RECCHAN %d", chan);
   FETCHPAR(text5, &recchan2);

   (void)sprintf(text5, "RECSEL %d", recchan2);
   FETCHPAR(text5, &recsel2);

   (void)sprintf(text5, "RECPRE %d", recsel2);
   FETCHPAR(text5, &recpre2);


   (void)sprintf(text5, "FCUCHAN %d", chan2);
   STOREPAR(text5, 0);

   (void)sprintf(text5, "RSEL %d", fcuchan2);
   STOREPAR(text5, 0);

   (void)sprintf(text5, "SWIBOX %d", rsel2);
   STOREPAR(text5, 0);

   (void)sprintf(text5, "PRECHAN %d", swibox2);
   STOREPAR(text5, -1);

   (void)sprintf(text5, "RECCHAN %d", chan);
   STOREPAR(text5, 0);

   (void)sprintf(text5, "RECSEL %d", recchan2);
   STOREPAR(text5, 0);

   (void)sprintf(text5, "RECPRE %d", recsel2);
   STOREPAR(text5, -1);


   STOREPAR("NUC2", "off");
   }


else if ( f19flag == 1 )
   RPAR("F19", "all")


else if ( p31flag == 1 )
   RPAR("P31", "all")


else
   RPAR("PROTONNRf3", "all")


STOREPAR("SOLVENT",solvent);


/***** store routing *****/

if ( chan != 1 )
   {
   /***** set additional nuc *****/

   if (chan == 2)
      STOREPAR("NUC2", obsnuc);

   if (chan == 3)
      STOREPAR("NUC3", obsnuc);
   }


/***** read routing from RPAR *****/

chan2 = 1;

(void)sprintf(text5, "FCUCHAN %d", chan2);
FETCHPAR(text5, &fcuchan2);

(void)sprintf(text5, "RSEL %d", fcuchan2);
FETCHPAR(text5, &rsel2);

(void)sprintf(text5, "SWIBOX %d", rsel2);
FETCHPAR(text5, &swibox2);

(void)sprintf(text5, "PRECHAN %d", swibox2);
FETCHPAR(text5, &prechan2);

(void)sprintf(text5, "RECCHAN %d", chan2);
FETCHPAR(text5, &recchan2);

(void)sprintf(text5, "RECSEL %d", recchan2);
FETCHPAR(text5, &recsel2);

(void)sprintf(text5, "RECPRE %d", recsel2);
FETCHPAR(text5, &recpre2);


/***** store additional routing and do getprosol *****/

(void)sprintf(text5, "FCUCHAN %d", chan);
STOREPAR(text5, fcuchan);

(void)sprintf(text5, "RSEL %d", fcuchan);
STOREPAR(text5, rsel);

(void)sprintf(text5, "SWIBOX %d", rsel);
STOREPAR(text5, swibox);

(void)sprintf(text5, "PRECHAN %d", swibox);
STOREPAR(text5, prechan);

(void)sprintf(text5, "RECCHAN %d", chan);
STOREPAR(text5, recchan);

(void)sprintf(text5, "RECSEL %d", recchan);
STOREPAR(text5, recsel);

(void)sprintf(text5, "RECPRE %d", recsel);
STOREPAR(text5, recpre);

STOREPAR("POWMOD", powmod);
STOREPAR("HPMOD", hpmod);


(void)strcpy(text, getprosoltxt);
if (sameplflag == 1 )
   {
   (void)sprintf(text + sizeof(getprosoltxt) - 1, " %s %f %f",
		 obsnuc, p90_ref, pl90_ref);
   }

jret = JAVACALL(text)

if (jret && *jret)
   {
   Proc_err(DEF_ERR_OPT, "%s", jret);
   ABORT;
   }


/***** reset old routing *****/

(void)sprintf(text5, "FCUCHAN %d", chan2);
STOREPAR(text5, 0);

(void)sprintf(text5, "RSEL %d", fcuchan2);
STOREPAR(text5, 0);

(void)sprintf(text5, "SWIBOX %d", rsel2);
STOREPAR(text5, 0);

(void)sprintf(text5, "PRECHAN %d", swibox2);
STOREPAR(text5, -1);

(void)sprintf(text5, "RECCHAN %d", chan2);
STOREPAR(text5, 0);

(void)sprintf(text5, "RECSEL %d", recchan2);
STOREPAR(text5, 0);

(void)sprintf(text5, "RECPRE %d", recsel2);
STOREPAR(text5, -1);


/***** store new routing *****/
   /***** in case some connections did get deleted *****/


(void)sprintf(text5, "FCUCHAN %d", chan);
STOREPAR(text5, 0);

(void)sprintf(text5, "FCUCHAN %d", chan2);
STOREPAR(text5, fcuchan);


(void)sprintf(text5, "RSEL %d", fcuchan);
STOREPAR(text5, rsel);

(void)sprintf(text5, "SWIBOX %d", rsel);
STOREPAR(text5, swibox);

(void)sprintf(text5, "PRECHAN %d", swibox);
STOREPAR(text5, prechan);

(void)sprintf(text5, "RECCHAN %d", chan2);
recchan = fcuchan;
STOREPAR(text5, recchan);

(void)sprintf(text5, "RECSEL %d", recchan);
if ( recsel == 0 )
   recsel = 1;
STOREPAR(text5, recsel);

(void)sprintf(text5, "RECPRE %d", recsel);
recpre = prechan;
STOREPAR(text5, recpre);

STOREPAR("POWMOD", powmod);
STOREPAR("HPMOD", hpmod);


/***** copy pulse/powerlevel and reset additional nuc *****/

if ( chan != 1 )
   {
   /***** get pulse/powerlevel *****/

   if (chan == 2)
      {
      FETCHPAR("P 3", &p1);
      FETCHPAR("PLdB 2", &pl1);

      STOREPAR("NUC2", "off");
      }

   if (chan == 3)
      {
      FETCHPAR("P 1", &p1);
      FETCHPAR("PLdB 3", &pl1);

      STOREPAR("NUC3", "off");
      }

   /***** store pulse/powerlevel for F1 *****/

   STOREPAR("P 1", p1);
   STOREPAR("PLdB 1", pl1);
   }

else
   FETCHPAR("P 1", &p1);


/***** set parameters *****/

STOREPAR("PULPROG", "zg");
STOREPAR("NS", 1);
STOREPAR("DS", 0);

if ( dsflag )
   STOREPAR("DS", 4);

STOREPAR("RG", 0.25);


FETCHPAR("DE", &de);
FETCHPAR("TD", &td2);


if ( c13flag == 1 )
   d1 = 20.0;

else if ( f19flag == 1 )
   {
   d1 = 10.0;

   STOREPAR("DE", 60.0);
   }

else if ( p31flag == 1 )
   d1 = 20.0;

else
   d1 = 2.0;


if ( d1flag == 1 )
   d1 = d1_ref;

STOREPAR("D 1", d1);

if ( d1arg != 0 )
   {
   sprintf(text, "0 D 1 %s", i_argv[d1arg] + sizeof(d1txt) - 1);
   XCMD(text)
   ERRORABORT;
   }


FETCHPAR("P 1", &p90_pl1);
STOREPAR("P 1", p90_pl1*0.3);

FETCHPAR("PLdB 1", &pl1);
STOREPAR("PLdB 1", pl1+3.0);

FETCHPAR("BF1", &bf1);
STOREPARS("BF1", bf1);

STOREPAR("SI", si);

if ( td2 > si*2)
   STOREPAR("TD", si*2);


STOREPAR("SSB", 2.0);
STOREPAR("LB", 4.0);
STOREPAR("WDW", 4);
STOREPAR("PSCAL", 0);
STOREPAR("PSIGN", 0);
STOREPAR("CY", 100.0);
STOREPAR("MAXI", 110.0);
STOREPAR("MI", 90.0);
STOREPAR("PC", 4.0);
STOREPAR("F1P",10000.0);
STOREPAR("F2P",-10000.0);

STOREPAR("SR", 0.0);


if ( f19flag == 1 )
   {
   STOREPAR("TDoff",-16);
   STOREPAR("LPBIN",8192);
   STOREPAR("NCOEF",4096);
   STOREPAR("ME_mod",4);
   }


/***** run calibration *****/

if ( fastflag == 0 )
   {
/***** get 1D *****/

   if ( h1flag == 1 || f19flag == 1 )
      {
      RGA;
      ERRORABORT;

      FETCHPAR("RG", &rg);
      rg /= 2.0;
      }
   else
      {
      rg = 200;
      }

   STOREPAR("RG", rg);


   ZG_OVERWRITE;
   ERRORABORT;


if ( f19flag == 1 )
   {
   CONVDTA(expno);
   ERRORABORT;
   }

   QSIN;
   ERRORABORT;
   FT;
   APK0;
   APK


   PP;
   ERRORABORT;


/***** read frequencies and find o1 *****/

   numpeaks = readPeakList(PROCPATH(0));

   amp_max1 = 0;


   for (i = 0; i < numpeaks; i++)
      {
      freq1 = getPeakFreqHz(i);
      amp1  = getPeakIntensity(i);


      if ( amp1 >= amp_max1 )
         {
         amp_max1 = amp1;

         freq_max = freq1;
         }
      }


   freePeakList();

   o1 = freq_max;
   }


/***** store parameters, run and process 1D *****/

pl29 = pl1 + delta_pl;


STOREPAR("PULPROG", "pulsecal");
STOREPAR("AQ_mod", 1);
STOREPAR("DIGMOD", 0);
STOREPAR("TD", td);
STOREPAR("DW", dw);
STOREPAR("O1", o1);
STOREPAR("PLdB 1", pl1);
STOREPAR("PLdB 29", pl29);
STOREPAR("DS", 0);

if ( nsflag == 1 )
   STOREPAR("NS", ns);

if ( nsarg != 0 )
   {
   sprintf(text, "0 NS %s", i_argv[nsarg] + sizeof(nstxt) - 1);
   XCMD(text)
   ERRORABORT;
   }


STOREPAR("DE", de);
STOREPAR("ME_mod",0);
STOREPAR("TDoff",0);

width /= bf1;

STOREPAR("BC_mod", 6);
STOREPAR("BCFW", width);

STOREPAR("GB", 0.1);

STOREPAR("SR", o1);


ZG_OVERWRITE;
ERRORABORT;


if ( c13flag == 1 || f19flag == 1 )
   {
   STOREPAR("PC", 4.0)
   STOREPAR("MI", 90.0)

   STOREPAR("LB", 4.0)
   EM
   }
else if ( p31flag == 1 )
   {
   STOREPAR("PC", 2.0)
   STOREPAR("MI", 80.0)

   STOREPAR("LB", 15.0)
   EM
   }
else
   {
   if ( snflag )
      {
      STOREPAR("PC", 4.0)
      STOREPAR("MI", 50.0)

      STOREPAR("LB", 4.0)
      EM
      }
   else
      {
      STOREPAR("PC", 1.0)
      STOREPAR("MI", 35.0) // modified from original value of 25

      STOREPAR("LB", -10.0)
      GM;
      }
   }

ERRORABORT;

FT;
MC;


/***** get parameters *****/

FETCHPARS("PLdB 1",&pl1);
FETCHPARS("PLdB 29",&pl29);
FETCHPARS("CNST 31",&cnst31);
FETCHPARS("BYTORDP",&byteorder);
FETCHPARS("SW",&sw)


ratio = cnst31;


/***** calculate maximum expected gB1max *****/

gb1_pl29_max = 1000000. / ( p90_pl1 * p90_scalef * ( pow ( 10., ( delta_pl  / 20. ) ) ) * 4. );

gb1_pl29_max *= 2. * ratio / 100.;


thresh = gb1_pl29_max / bf1;


/***** store parameters *****/

if ( optflag )
   {
   STOREPAR("F1P",thresh/2.0);
   STOREPAR("F2P",-thresh/2.0);
   }
else
   {
   STOREPAR("F1P",sw/3.0);
   STOREPAR("F2P",-sw/3.0);
   }


/***** check and read data *****/

(void)strcpy(infile, PROCPATH("1r"));

fpi = fopen(infile,"rb");
if ( fpi == NULL )
   {
   (void)sprintf(text,"cannot open input file:\n%s",infile);
   STOPMSG(text);
   }


if (fread(r_in, sizeof(int), si, fpi) != si)
   {
   (void)sprintf(text,"read failed for input file:\n%s",infile);
   STOPMSG(text);
   }

fclose(fpi);

local_swap4(r_in,sizeof(int)*si,byteorder);


/***** symmetrise spectrum *****/

thresh =   ( gb1_pl29_max * si ) / ( 2.0 * sw * bf1 );


for (counter=0; counter < si/2; counter++)
   {
   re1 = r_in[counter];
   re2 = r_in[si - 1 - counter];

   if (re1 <= re2)
      {
      re2 = re1;
      }


   if ( optflag )
      {
      if ( counter <  ( si/2 - (int)thresh )  )
         re2 = 0;
      }
   else
      {
      if ( counter <  si/10  )
         re2 = 0;
      }


   r_in[counter] = re2;
   r_in[si-1-counter] = re2;
   }


/***** check and store data *****/

fpo = fopen(infile,"wb");
if ( fpo == NULL )
   {
   (void)sprintf(text,"cannot open output file:\n%s",infile);
   STOPMSG(text);
   }


local_swap4(r_in,sizeof(int)*si,byteorder);
if (fwrite(r_in, sizeof(int), si, fpo) != si)
   {
   (void)sprintf(text,"write failed for output file:\n%s",infile);
   STOPMSG(text);
   }


fclose(fpo);


/***** find min/max *****/

val_min = MAXINT;
val_max = -val_min;


for (counter=0; counter < si; counter++)
   {
   val = r_in[counter];

   if (  val > val_max )
      {
      val_max = val;
      }

   if (  val  < val_min )
      {
      val_min = val;
      }
   }


STOREPARS("YMAX_p", val_max);
STOREPARS("YMIN_p", val_min);


/***** audit entry *****/

hashbuf = autext + sprintf(autext, "pulsecal %s, symmetrised", cmd);

if (CheckSumBuffer(r_in, hashbuf, 0, 1, si, &si, &si) > 0)
   (void)AuditAppend(PROCPATH("auditp.txt"), autext);


/***** do pp *****/

PP;
ERRORABORT;


/***** count frequencies *****/

numfreq_max = readPeakList(PROCPATH(0));


/***** check maximum number of frequencies in pp-list *****/

if ( numfreq_max > MAXNUMFREQ )
   {
   (void)sprintf(text,"number of entries in peaklist exceeds limit (%d)",
                                                                 MAXNUMFREQ);
   STOPMSG(text);
   }


if ( numfreq_max < 2 )
   {
   (void)sprintf(text,"number of entries in peaklist not sufficient (< 2)");
   STOPMSG(text);
   }


/***** read frequencies *****/

for (counter = 0; counter < numfreq_max; counter++)
   {
   freq[counter] = getPeakFreqHz(counter);
   amp[counter] = getPeakIntensity(counter);
   }

freePeakList();


if ( allflag == 0 )
   {
   /***** find min/max amp and freq *****/

   counter = 0;

   amp_max1 = 0;
   amp_max2 = 0;
   amp_max3 = 0;
   amp_max4 = 0;

   freq_max1 = 0;
   freq_max2 = 0;
   freq_min1 = 0;
   freq_min2 = 0;

   for ( counter = 0; counter < numfreq_max; counter ++ )
      {
      if ( freq[counter] >= 0 && amp[counter] >= amp_max1 )
         {
         amp_max2 = amp_max1;
         amp_max1 = amp[counter];

         freq_max2 = freq_max1;
         freq_max1 = freq[counter];
         }

      if ( freq[counter] >= 0 && amp[counter] < amp_max1 && amp[counter] > amp_max2)
         {
         amp_max2 = amp[counter];

         freq_max2 = freq[counter];
         }


      if ( freq[counter] < 0 && amp[counter] >= amp_max4 )
         {
         amp_max3 = amp_max4;
         amp_max4 = amp[counter];

         freq_min2 = freq_min1;
         freq_min1 = freq[counter];
         }

      if ( freq[counter] < 0 && amp[counter] < amp_max4 && amp[counter] > amp_max3)
         {
         amp_max3 = amp[counter];

         freq_min2 = freq[counter];
         }
      }


   /*****  set scalef *****/

   if ( freq_max2 == 0 )
      {
      scalef -= 1;
      }

   if ( freq_min2 == 0 )
      {
      scalef -= 1;
      }


   freq_delta = ( freq_max1 + freq_max2 - freq_min1 - freq_min2 );
   }
else
   {
   freq_sum_pos = 0;
   freq_sum_neg = 0;

   for ( counter = 0; counter < numfreq_max; counter ++ )
      {
      if ( freq[counter] >= 0 )
         {
	 freq_sum_pos += freq[counter];
	 }

      if ( freq[counter] < 0 )
         {
	 freq_sum_neg += freq[counter];
	 }
      }

   freq_delta = (freq_sum_pos - freq_sum_neg ) / numfreq_max;

   scalef = 1;
   }


/***** get Amp max power *****/

max_watt = getAmpPowerMax(0, curdat);

max_db = - 10.0 * log10 ( max_watt );


/***** calculate results *****/

gb1_pl29 = freq_delta * 100.0 * 2.0 / ( 2.0 * ratio * scalef);


p90_pl29 = 1000000.0 / ( 4.0 * gb1_pl29 );


p90_pl1 = p90_pl29 * ( pow ( 10., ( (pl1 - pl29 + pl_offset) / 20. ) ) );


cp = text + sprintf(text,"%s:\n\n"
			 "gammaB1/2pi at %.1f dB :\t%.1f Hz\n\n"
			 "90o pulse at %.1f dB :\t%.2f us\n\n\n"
			 "90o pulse at %.1f dB %s:\t%.2f us\n",
			 obsnuc, pl29, gb1_pl29, pl29, p90_pl29, pl1, text4, p90_pl1);


/***** check deviation (for X only) *****/

if ( h1flag == 0 )
   {
   if ( (p1 / p90_pl1 < 0.94) || (p1 / p90_pl1 > 1.06) )
      {
      (void)sprintf(cp, "\n\n------------------------------------------------\n\n\n"
			"90o pulse for %s differs by more than +/- 0.5dB\n\n"
			"from prosol entry (%.2f us)\n\n"
			"- check other pulses for %s\n\n", obsnuc, p1, obsnuc);
      }
   }


/***** calculate further values *****/

flag_pl = 3;


if ( manflag )
   {

   cp = text2 + sprintf(text2,
			"%s\n\n------------------------------------------------\n\n"
			"\t90o pulse %sat:\n", text, text4);

   pl_start = pl1 - 2.0;

   while ( pl_start < max_db )
      {
      pl_start += 0.5;
      }

   pl_var = pl_start;


   for (counter=0; counter < 9; counter++)
      {
      p90_var = p90_pl29 * ( pow ( 10., ( (pl_var - pl29 + pl_offset) / 20. ) ) );


      cp += sprintf(cp,"\n(%d)\t%.1f dB:\t%.2f us\n",
		       counter+1, pl_var, p90_var);

      if ( pl_var == pl1 )
         {
         flag_pl = counter + 1;
         }


      pl_var += 0.5;
      }


   (void)strcpy(cp,"\n\n------------------------------------------------\n\n"
		   "enter selection :");


   for(;;)
      {
      GETINT(text2, flag_pl);

      if ( flag_pl >= 1 && flag_pl <= 9 )
         {
         break;
         }

      else
         {
         flag_pl = 5;
         }
      }


   pl_var = pl_start + 0.5 * ( flag_pl - 1 );

   p90_var = p90_pl29 * ( pow ( 10., ( (pl_var - pl29 + pl_offset) / 20. ) ) );


   pl1 = pl_var;

   p90_pl1 = p90_var;
   }


/***** print message *****/

if ( quietflag == 0 && manflag == 0 )
   {
   Proc_err(DEF_ERR_OPT, "%s", text);
   }


/***** store result and do getprosol *****/

DATASET (name,curexpno,procno,disk,user)


if (chan == 1)
   {
   STOREPAR("PLdB 1", pl1);
   STOREPAR("P 1", p90_pl1);
   }

if (chan == 2)
   {
   STOREPAR("PLdB 2", pl1);
   STOREPAR("P 3", p90_pl1);
   }

if (chan == 3)
   {
   STOREPAR("PLdB 3", pl1);
   STOREPAR("P 1", p90_pl1);
   }


if ( h1flag == 1 )
   {
   (void)sprintf(text, "getprosol 1H %f %f", p90_pl1, pl1);
   jret = JAVACALL(text)

   if (jret && *jret)
      {
      Proc_err(DEF_ERR_OPT, "%s", jret);
      ABORT;
      }
   }
else
   {
   Show_meta(SM_RAWP);
   }


return 0;
}
